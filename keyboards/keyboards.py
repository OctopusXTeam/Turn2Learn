"""–ú–æ–¥—É–ª—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏ –¥–ª—è –±–æ—Ç–∞"""

from aiogram import types
from utils.constants import SUPPORTED_LANGUAGES
from locales.translations import TRANSLATIONS

def get_language_keyboard() -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    keyboard = []
    row = []
    
    for lang_code, lang_name in SUPPORTED_LANGUAGES.items():
        row.append(types.InlineKeyboardButton(
            text=lang_name,
            callback_data=f"lang_{lang_code}"
        ))
        
        if len(row) == 2:
            keyboard.append(row)
            row = []
            
    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        keyboard.append(row)
        
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_main_menu_keyboard(language: str) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [types.InlineKeyboardButton(
            text=TRANSLATIONS[language]['learn'],
            callback_data="learn"
        )],
        [types.InlineKeyboardButton(
            text=TRANSLATIONS[language]['my_cards'],
            callback_data="my_cards"
        )],
        [types.InlineKeyboardButton(
            text=TRANSLATIONS[language]['settings'],
            callback_data="settings"
        )],
        [types.InlineKeyboardButton(
            text=TRANSLATIONS[language]['language'],
            callback_data="change_language"
        )]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_settings_keyboard(language: str, front_languages: list, back_languages: list, show_learn_button: bool = False) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    keyboard = []
    
    # –°–ª–æ–≤–∞—Ä—å —Å —Ñ–ª–∞–≥–∞–º–∏ –¥–ª—è —è–∑—ã–∫–æ–≤
    flags = {'ru': 'üá∑üá∫', 'en': 'üá¨üáß', 'es': 'üá™üá∏', 'ro': 'üá∑üá¥'}
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–æ–≤
    for lang in ['ru', 'en', 'es', 'ro']:
        front_status = '‚úÖ' if lang in front_languages else '‚úñÔ∏è'
        back_status = '‚úÖ' if lang in back_languages else '‚úñÔ∏è'
        
        keyboard.append([
            types.InlineKeyboardButton(
                text=f"{front_status} {flags[lang]}",
                callback_data=f"front_{lang}"
            ),
            types.InlineKeyboardButton(
                text=f"{back_status} {flags[lang]}",
                callback_data=f"back_{lang}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.append([
        types.InlineKeyboardButton(
            text=TRANSLATIONS[language]['back_to_menu'],
            callback_data="back_to_menu"
        )
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    keyboard.append([
        types.InlineKeyboardButton(
            text=TRANSLATIONS[language]['notifications'],
            callback_data="notifications"
        )
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£—á–∏—Ç—å" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —è–∑—ã–∫–∏ —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω
    if front_languages and back_languages:
        keyboard.append([
            types.InlineKeyboardButton(
                text=TRANSLATIONS[language]['learn'],
                callback_data="learn"
            )
        ])
    
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_cards_keyboard(language: str, cards: list, page: int = 1, cards_per_page: int = 10) -> tuple[types.InlineKeyboardMarkup, str]:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    keyboard = []
    total_pages = (len(cards) + cards_per_page - 1) // cards_per_page if cards else 1
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    if not cards:
        page_counter = TRANSLATIONS[language]['my_cards']
    else:
        page_counter = (
            f"{TRANSLATIONS[language]['my_cards']} | "
            f"{TRANSLATIONS[language]['total_cards'].format(len(cards))} | "
            f"{TRANSLATIONS[language]['page_counter'].format(page, total_pages)}"
        )
    
    if not cards:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—É—Å—Ç–æ" –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫
        keyboard.append([types.InlineKeyboardButton(
            text=TRANSLATIONS[language]['empty_button'],
            callback_data="add_card"
        )])
    else:
        start_idx = (page - 1) * cards_per_page
        end_idx = min(start_idx + cards_per_page, len(cards))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        for card in cards[start_idx:end_idx]:
            translations = []
            for lang_code, word in card['translations'].items():
                if lang_code == 'ru':
                    translations.append(f"üá∑üá∫ {word}")
                elif lang_code == 'en':
                    translations.append(f"üá¨üáß {word}")
                elif lang_code == 'es':
                    translations.append(f"üá™üá∏ {word}")
                elif lang_code == 'ro':
                    translations.append(f"üá∑üá¥ {word}")
            keyboard.append([types.InlineKeyboardButton(
                text=' | '.join(translations),
                callback_data=f"card_{card['id']}"
            )])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if page == 1:
        nav_buttons.append(types.InlineKeyboardButton(
            text="‚Ä¢‚Ä¢‚Ä¢",
            callback_data="page_0"
        ))
    else:
        nav_buttons.append(types.InlineKeyboardButton(
            text=TRANSLATIONS[language]['prev_page'],
            callback_data=f"page_{page-1}"
        ))
    
    # –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å"
    nav_buttons.append(types.InlineKeyboardButton(
        text=TRANSLATIONS[language]['add_button'],
        callback_data="add_card"
    ))
    
    # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
    if page >= total_pages:
        nav_buttons.append(types.InlineKeyboardButton(
            text="‚Ä¢‚Ä¢‚Ä¢",
            callback_data=f"page_{total_pages+1}"
        ))
    else:
        nav_buttons.append(types.InlineKeyboardButton(
            text=TRANSLATIONS[language]['next_page'],
            callback_data=f"page_{page+1}"
        ))
    
    keyboard.append(nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    keyboard.append([types.InlineKeyboardButton(
        text=TRANSLATIONS[language]['back_to_menu'],
        callback_data="back_to_menu"
    )])
    
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard), page_counter

def get_card_view_keyboard(language: str, card_id: int) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏."""
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
    edit_buttons = [
        [
            types.InlineKeyboardButton(
                text=f"üá∑üá∫ {TRANSLATIONS[language]['edit_button']}", 
                callback_data=f"edit_{card_id}_ru"
            ),
            types.InlineKeyboardButton(
                text=f"üá¨üáß {TRANSLATIONS[language]['edit_button']}", 
                callback_data=f"edit_{card_id}_en"
            )
        ],
        [
            types.InlineKeyboardButton(
                text=f"üá™üá∏ {TRANSLATIONS[language]['edit_button']}", 
                callback_data=f"edit_{card_id}_es"
            ),
            types.InlineKeyboardButton(
                text=f"üá∑üá¥ {TRANSLATIONS[language]['edit_button']}", 
                callback_data=f"edit_{card_id}_ro"
            )
        ]
    ]
    keyboard.extend(edit_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    control_buttons = [
        types.InlineKeyboardButton(
            text=TRANSLATIONS[language]['delete_button'],
            callback_data=f"delete_{card_id}"
        ),
        types.InlineKeyboardButton(
            text=TRANSLATIONS[language]['back_button'],
            callback_data="back_to_cards"
        )
    ]
    keyboard.append(control_buttons)
    
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_add_card_keyboard(language: str, translations: dict = None) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏."""
    if translations is None:
        translations = {}
    
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    keyboard.extend([
        [
            types.InlineKeyboardButton(
                text=f"üá∑üá∫ {TRANSLATIONS[language]['add_button']}", 
                callback_data="add_translation_ru"
            ),
            types.InlineKeyboardButton(
                text=f"üá¨üáß {TRANSLATIONS[language]['add_button']}", 
                callback_data="add_translation_en"
            )
        ],
        [
            types.InlineKeyboardButton(
                text=f"üá™üá∏ {TRANSLATIONS[language]['add_button']}", 
                callback_data="add_translation_es"
            ),
            types.InlineKeyboardButton(
                text=f"üá∑üá¥ {TRANSLATIONS[language]['add_button']}", 
                callback_data="add_translation_ro"
            )
        ]
    ])
    
    # –ö–Ω–æ–ø–∫–∏ GPT, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    control_buttons = [
        [types.InlineKeyboardButton(
            text="GPT",
            callback_data="add_translation_gpt"
        )],
        [
            types.InlineKeyboardButton(
                text=TRANSLATIONS[language]['save_button'],
                callback_data="save_card"
            ),
            types.InlineKeyboardButton(
                text=TRANSLATIONS[language]['back_button'],
                callback_data="back_to_cards"
            )
        ]
    ]
    keyboard.extend(control_buttons)
    
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard) 